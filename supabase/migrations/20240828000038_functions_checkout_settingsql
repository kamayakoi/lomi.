-- Function to fetch organization checkout settings
CREATE OR REPLACE FUNCTION public.fetch_organization_checkout_settings(p_organization_id UUID)
RETURNS TABLE (
    organization_id UUID,
    default_language VARCHAR,
    display_currency currency_code,
    payment_link_duration INTEGER,
    customer_notifications JSONB,
    merchant_recipients JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        ocs.organization_id,
        ocs.default_language,
        ocs.display_currency,
        ocs.payment_link_duration,
        ocs.customer_notifications,
        ocs.merchant_recipients
    FROM organization_checkout_settings ocs
    WHERE ocs.organization_id = p_organization_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

-- Function to update customer notifications
CREATE OR REPLACE FUNCTION public.update_customer_notifications(
    p_organization_id UUID,
    p_notifications JSONB
) RETURNS void AS $$
BEGIN
    INSERT INTO organization_checkout_settings (
        organization_id,
        customer_notifications
    ) VALUES (
        p_organization_id,
        p_notifications
    )
    ON CONFLICT (organization_id) 
    DO UPDATE SET 
        customer_notifications = p_notifications,
        updated_at = NOW();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

-- Function to update merchant recipients
CREATE OR REPLACE FUNCTION public.update_merchant_recipients(
    p_organization_id UUID,
    p_recipients JSONB
) RETURNS void AS $$
BEGIN
    INSERT INTO organization_checkout_settings (
        organization_id,
        merchant_recipients
    ) VALUES (
        p_organization_id,
        p_recipients
    )
    ON CONFLICT (organization_id) 
    DO UPDATE SET 
        merchant_recipients = p_recipients,
        updated_at = NOW();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

-- Function to update all checkout settings
CREATE OR REPLACE FUNCTION public.update_organization_checkout_settings(
    p_organization_id UUID,
    p_settings JSONB
) RETURNS void AS $$
BEGIN
    INSERT INTO organization_checkout_settings (
        organization_id,
        default_language,
        display_currency,
        payment_link_duration,
        customer_notifications,
        merchant_recipients
    ) VALUES (
        p_organization_id,
        COALESCE((p_settings->>'default_language')::VARCHAR, 'en'),
        COALESCE((p_settings->>'display_currency')::currency_code, 'XOF'),
        COALESCE((p_settings->>'payment_link_duration')::INTEGER, 1),
        COALESCE(p_settings->'customer_notifications', '{
            "new_payment_links": {"email": false, "whatsapp": false},
            "payment_reminders": {"email": false, "whatsapp": false},
            "successful_payment_attempts": {"email": false, "whatsapp": false}
        }'::jsonb),
        COALESCE(p_settings->'merchant_recipients', '[]'::jsonb)
    )
    ON CONFLICT (organization_id) 
    DO UPDATE SET 
        default_language = COALESCE((EXCLUDED.default_language)::VARCHAR, organization_checkout_settings.default_language),
        display_currency = COALESCE((EXCLUDED.display_currency)::currency_code, organization_checkout_settings.display_currency),
        payment_link_duration = COALESCE(EXCLUDED.payment_link_duration, organization_checkout_settings.payment_link_duration),
        customer_notifications = COALESCE(EXCLUDED.customer_notifications, organization_checkout_settings.customer_notifications),
        merchant_recipients = COALESCE(EXCLUDED.merchant_recipients, organization_checkout_settings.merchant_recipients),
        updated_at = NOW();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp; 