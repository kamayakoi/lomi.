--------------- ENUM TYPES ---------------

CREATE TYPE transaction_status AS ENUM ('pending', 'completed', 'failed', 'refunded');
CREATE TYPE transaction_type AS ENUM ('payment', 'instalment');
CREATE TYPE organization_status AS ENUM ('active', 'inactive', 'suspended');
CREATE TYPE provider_code AS ENUM ('ORANGE', 'WAVE', 'ECOBANK', 'MTN', 'STRIPE', 'OTHER');
CREATE TYPE refund_status AS ENUM ('pending', 'completed', 'failed');
CREATE TYPE invoice_status AS ENUM ('sent', 'paid', 'overdue', 'cancelled');
CREATE TYPE frequency AS ENUM ('daily', 'weekly', 'bi-weekly', 'monthly', 'quaterly' , 'yearly', 'one-time');
CREATE TYPE entry_type AS ENUM ('debit', 'credit');
CREATE TYPE subscription_status AS ENUM ('pending', 'active', 'paused', 'cancelled', 'expired', 'past_due', 'trial');
CREATE TYPE payment_method_code AS ENUM ('CARDS', 'MOBILE_MONEY', 'E_WALLET', 'BANK_TRANSFER', 'APPLE_PAY', 'GOOGLE_PAY', 'USSD', 'QR_CODE');
CREATE TYPE currency_code AS ENUM ('XOF', 'USD', 'EUR');
CREATE TYPE payout_status AS ENUM ('pending', 'processing', 'completed', 'failed');
CREATE TYPE dispute_status AS ENUM ('pending', 'resolved', 'closed');
CREATE TYPE kyc_status AS ENUM ('pending', 'approved', 'rejected');
CREATE TYPE entity_type AS ENUM ('merchant', 'organization', 'platform');
CREATE TYPE feedback_status AS ENUM ('open', 'reviewed', 'implemented', 'closed');
CREATE TYPE ticket_status AS ENUM ('open', 'resolved', 'closed');
CREATE TYPE notification_type AS ENUM ('onboarding', 'tip', 'transaction', 'payout', 'provider_status', 'alert', 'billing', 'compliance', 'update', 'security_alert', 'maintenance', 'dispute', 'refund', 'invoice', 'subscription', 'webhook', 'chargeback');

--------------- TABLES ---------------

-- Merchants table
CREATE TABLE merchants (
  merchant_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR,
  email VARCHAR UNIQUE NOT NULL,
  phone_number VARCHAR UNIQUE,
  onboarded BOOLEAN NOT NULL DEFAULT false,
  country VARCHAR,
  avatar_url TEXT,
  preferred_language VARCHAR(10),
  timezone VARCHAR NOT NULL DEFAULT 'UTC',
  referral_code VARCHAR,
  pin_code VARCHAR(4),
  mrr NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  arr NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  merchant_lifetime_value NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  metadata JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_deleted BOOLEAN NOT NULL DEFAULT false,
  deleted_at TIMESTAMPTZ
);

CREATE INDEX idx_merchants_email ON merchants(email);
CREATE INDEX idx_active_merchants ON merchants(merchant_id) WHERE is_deleted = false;

COMMENT ON TABLE merchants IS 'Stores information about all merchants using the system';
COMMENT ON COLUMN merchants.mrr IS 'Monthly Recurring Revenue: Total recurring revenue generated by the merchant in the current month';
COMMENT ON COLUMN merchants.arr IS 'Annual Recurring Revenue: Total recurring revenue generated by the merchant in the current year';
COMMENT ON COLUMN merchants.merchant_lifetime_value IS 'Estimated total revenue a merchant will generate over their lifetime';

-- Organizations table
CREATE TABLE organizations (
  organization_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR NOT NULL,
  email VARCHAR UNIQUE NOT NULL,
  phone_number VARCHAR NOT NULL,
  verified BOOLEAN NOT NULL DEFAULT false,
  website_url VARCHAR,
  logo_url VARCHAR,
  status organization_status NOT NULL DEFAULT 'active',
  default_currency currency_code NOT NULL DEFAULT 'XOF',
  total_revenue NUMERIC(15,2) DEFAULT 0.00,
  total_transactions INT DEFAULT 0,
  total_merchants INT DEFAULT 0,
  total_customers INT DEFAULT 0,
  employee_number VARCHAR,
  industry VARCHAR,
  metadata JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_deleted BOOLEAN NOT NULL DEFAULT false,
  deleted_at TIMESTAMPTZ
);

CREATE INDEX idx_organizations_email ON organizations(email);
CREATE INDEX idx_organizations_is_deleted ON organizations(is_deleted) WHERE is_deleted = false;

COMMENT ON TABLE organizations IS 'Represents businesses or entities using our application';
COMMENT ON COLUMN organizations.status IS 'Current status of the organization account';


-- Organization Addresses table
CREATE TABLE organization_addresses (
  organization_id UUID NOT NULL PRIMARY KEY REFERENCES organizations(organization_id),
  country VARCHAR NOT NULL,
  region VARCHAR,
  city VARCHAR,
  district VARCHAR,
  street VARCHAR,
  postal_code VARCHAR,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_organization_addresses_organization_id ON organization_addresses(organization_id);

COMMENT ON TABLE organization_addresses IS 'Stores address information for organizations';

-- Merchant-Organization KYC table
CREATE TABLE organization_kyc (
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  legal_organization_name VARCHAR,
  tax_number VARCHAR,
  business_description VARCHAR,
  legal_country VARCHAR,
  legal_region VARCHAR,
  legal_city VARCHAR,
  legal_postal_code VARCHAR,
  legal_street VARCHAR,
  proof_of_business VARCHAR,
  business_platform_url VARCHAR,
  authorized_signatory_name VARCHAR,
  authorized_signatory_email VARCHAR,
  authorized_signatory_phone_number VARCHAR,
  legal_representative_ID_url VARCHAR,
  address_proof_url VARCHAR,
  business_registration_url VARCHAR,
  status VARCHAR NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'not_authorized', 'approved', 'rejected')),
  kyc_submitted_at TIMESTAMPTZ,
  kyc_approved_at TIMESTAMPTZ,
  PRIMARY KEY (organization_id, merchant_id)
);

CREATE INDEX idx_organization_kyc_organization_id ON organization_kyc(organization_id);
CREATE INDEX idx_organization_kyc_merchant_id ON organization_kyc(merchant_id);

COMMENT ON TABLE organization_kyc IS 'Stores KYC information for organizations';


-- Merchant-Organization links table
CREATE TABLE merchant_organization_links (
  merchant_org_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  role VARCHAR NOT NULL CHECK (role IN ('Admin', 'Member')),
  workspace_handle VARCHAR UNIQUE NOT NULL,
  how_did_you_hear_about_us VARCHAR,
  organization_position VARCHAR,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (merchant_id, organization_id)
);

CREATE INDEX idx_merchant_org_links_merchant_id ON merchant_organization_links(merchant_id);
CREATE INDEX idx_merchant_org_links_org_id ON merchant_organization_links(organization_id);

COMMENT ON TABLE merchant_organization_links IS 'Links merchants to organizations, defining their roles within each organization';

-- Providers table
CREATE TABLE providers (
  provider_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR NOT NULL,
  code provider_code NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_providers_code ON providers(code);

COMMENT ON TABLE providers IS 'Examples: MTN, WAVE, ORANGE, STRIPE, PAYPAL';


-- Payment methods table
CREATE TABLE payment_methods (
  payment_method_code payment_method_code,
  provider_code provider_code REFERENCES providers(code),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (payment_method_code, provider_code)
);

CREATE INDEX idx_payment_methods_provider_code ON payment_methods(provider_code);

COMMENT ON TABLE payment_methods IS 'Examples: CARD, MOBILE_MONEY, CASH, BANK_TRANSFER';


-- Organization-Providers Settings table
CREATE TABLE organization_providers_settings (
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    provider_code provider_code NOT NULL REFERENCES providers(code),
    is_connected BOOLEAN NOT NULL DEFAULT false,
    phone_number VARCHAR,
    card_number VARCHAR,
    bank_account_number VARCHAR,
    bank_account_name VARCHAR,
    bank_name VARCHAR,
    bank_code VARCHAR,
    complementary_information JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (organization_id, provider_code),
    UNIQUE (organization_id, provider_code)
);

CREATE INDEX idx_org_providers_provider_code ON organization_providers_settings(provider_code);

COMMENT ON TABLE organization_providers_settings IS 'Links organizations to their chosen payment providers';
COMMENT ON COLUMN organization_providers_settings.is_connected IS 'Indicates if the organization has successfully connected and set up the provider';


-- Currencies table
CREATE TABLE currencies (
  code currency_code PRIMARY KEY,
  name VARCHAR NOT NULL
);

COMMENT ON TABLE currencies IS 'Examples: USD, EUR, XOF, GHS, NGN, etc.';


-- Customers table
CREATE TABLE customers (
    customer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    name VARCHAR NOT NULL,
    email VARCHAR,
    phone_number VARCHAR,
    country VARCHAR,
    city VARCHAR,
    address VARCHAR,
    postal_code VARCHAR,
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_customers_merchant_id ON customers(merchant_id);
CREATE INDEX idx_customers_organization_id ON customers(organization_id);
CREATE INDEX idx_customers_email ON customers(email);
CREATE INDEX idx_customers_phone_number ON customers(phone_number);

COMMENT ON TABLE customers IS 'Stores information about the customers of our merchants';


-- Merchant Accounts table
CREATE TABLE merchant_accounts (
    account_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    balance NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (balance >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code) DEFAULT 'XOF',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (merchant_id, currency_code)
);

CREATE INDEX idx_merchant_accounts_merchant_id ON merchant_accounts(merchant_id);
CREATE INDEX idx_merchant_accounts_currency_code ON merchant_accounts(currency_code);

COMMENT ON TABLE merchant_accounts IS 'Represents the account for each merchant, storing their balance in each currency';

-- Platform Main account Balance table
CREATE TABLE platform_main_account (
    balance_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    total_balance NUMERIC(15,2) NOT NULL DEFAULT 0,
    available_balance NUMERIC(15,2) NOT NULL DEFAULT 0,
    pending_balance NUMERIC(15,2) NOT NULL DEFAULT 0,
    currency_code currency_code NOT NULL,
    last_updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_platform_main_account_currency_code ON platform_main_account(currency_code);

COMMENT ON TABLE platform_main_account IS 'Tracks the overall platform balance across all currencies';

-- Platform Provider Balance table
CREATE TABLE platform_provider_balance (
    provider_code provider_code NOT NULL,
    balance NUMERIC(15,2) NOT NULL DEFAULT 0,
    currency_code currency_code NOT NULL,
    last_updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (provider_code, currency_code)
);

CREATE INDEX idx_platform_provider_balance_currency_code ON platform_provider_balance(currency_code);

COMMENT ON TABLE platform_provider_balance IS 'Tracks the balance for each provider in each currency';

-- Merchant Products table
CREATE TABLE merchant_products (
    product_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price NUMERIC(10,2) NOT NULL CHECK (price >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    image_url TEXT,
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_merchant_products_merchant_id ON merchant_products(merchant_id);
CREATE INDEX idx_merchant_products_currency_code ON merchant_products(currency_code);

COMMENT ON TABLE merchant_products IS 'Stores products and services offered by merchants';


-- Merchant Subscriptions table
CREATE TABLE merchant_subscriptions (
    subscription_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status subscription_status NOT NULL DEFAULT 'pending',
    image_url TEXT,
    start_date DATE NOT NULL,
    end_date DATE,
    next_billing_date DATE,
    billing_frequency frequency NOT NULL,
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    retry_payment_every INT DEFAULT 0,
    total_retries INT DEFAULT 0,
    failed_payment_action VARCHAR,
    email_notifications JSONB,
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_subscriptions_merchant_id ON merchant_subscriptions(merchant_id);
CREATE INDEX idx_subscriptions_organization_id ON merchant_subscriptions(organization_id);
CREATE INDEX idx_subscriptions_customer_id ON merchant_subscriptions(customer_id);
CREATE INDEX idx_subscriptions_currency_code ON merchant_subscriptions(currency_code);

COMMENT ON TABLE merchant_subscriptions IS 'Stores information for recurring payments and subscriptions';
COMMENT ON COLUMN merchant_subscriptions.next_billing_date IS 'The next billing date of the subscription';
COMMENT ON COLUMN merchant_subscriptions.status IS 'Current status of the subscription (active, paused, cancelled, expired)';

-- Add comments to explain the subscription statuses
COMMENT ON TYPE subscription_status IS 'Enum for subscription statuses:
- active: Subscription is currently active and payments are up-to-date
- paused: Subscription is temporarily paused (e.g., at customer''s request)
- cancelled: Subscription has been cancelled but may still be active until the end of the current billing period
- expired: Subscription has reached its end date or maximum number of billing cycles
- past_due: Payment is overdue but the subscription is still active
- pending: Subscription has been created but is not yet active (e.g., waiting for initial payment)
- trial: Subscription is in a trial period';

-- Update the comment on the merchant_subscriptions table
COMMENT ON TABLE merchant_subscriptions IS 'Stores information for recurring payments and subscriptions, including status and visual representation';


-- Fees table
CREATE TABLE fees (
    fee_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR NOT NULL UNIQUE,
    transaction_type transaction_type NOT NULL,
    fee_type VARCHAR NOT NULL,
    percentage NUMERIC(5,2) NOT NULL DEFAULT 0 CHECK (percentage >= -100 AND percentage <= 100),
    fixed_amount NUMERIC(10,2) NOT NULL DEFAULT 0 CHECK (fixed_amount >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    payment_method_code payment_method_code,
    provider_code provider_code,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (payment_method_code, provider_code) REFERENCES payment_methods(payment_method_code, provider_code)
);

CREATE INDEX idx_fees_transaction_type ON fees(transaction_type);
CREATE INDEX idx_fees_fee_type ON fees(fee_type);
CREATE INDEX idx_fees_currency_code ON fees(currency_code);
CREATE INDEX idx_fees_payment_method_code ON fees(payment_method_code);
CREATE INDEX idx_fees_provider_code ON fees(provider_code);
CREATE INDEX idx_fees_payment_method_provider ON fees(payment_method_code, provider_code);

COMMENT ON TABLE fees IS 'Defines fee structures for different transaction types and payment methods';


-- Transactions table
CREATE TABLE transactions (
    transaction_id UUID PRIMARY KEY UNIQUE DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    product_id UUID REFERENCES merchant_products(product_id),
    subscription_id UUID REFERENCES merchant_subscriptions(subscription_id),
    transaction_type transaction_type NOT NULL,
    status transaction_status NOT NULL DEFAULT 'pending',
    description TEXT,
    reference_id VARCHAR(8) NOT NULL,
    metadata JSONB,
    gross_amount NUMERIC(10,2) NOT NULL CHECK (gross_amount > 0),
    fee_amount NUMERIC(15,2) NOT NULL,
    net_amount NUMERIC(10,2) NOT NULL CHECK (net_amount > 0),
    fee_reference TEXT NOT NULL REFERENCES fees(name),
    currency_code currency_code NOT NULL REFERENCES currencies(code) DEFAULT 'XOF',
    provider_code provider_code NOT NULL REFERENCES providers(code),
    payment_method_code payment_method_code NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (payment_method_code, provider_code) REFERENCES payment_methods(payment_method_code, provider_code)
);

CREATE INDEX idx_transactions_merchant_id ON transactions(merchant_id);
CREATE INDEX idx_transactions_organization_id ON transactions(organization_id);
CREATE INDEX idx_transactions_customer_id ON transactions(customer_id);
CREATE INDEX idx_transactions_transaction_type ON transactions(transaction_type);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_transactions_currency_code ON transactions(currency_code);
CREATE INDEX idx_transactions_payment_method_code ON transactions(payment_method_code);
CREATE INDEX idx_transactions_product_id ON transactions(product_id);
CREATE INDEX idx_transactions_subscription_id ON transactions(subscription_id);
CREATE INDEX idx_transactions_created_at ON transactions(created_at);
CREATE INDEX idx_transactions_net_amount ON transactions(net_amount);
CREATE INDEX idx_transactions_gross_amount ON transactions(gross_amount);
CREATE INDEX idx_transactions_fee_amount ON transactions(fee_amount);
CREATE INDEX idx_transactions_pending ON transactions(transaction_id) WHERE status = 'pending';
CREATE INDEX idx_transactions_completed ON transactions(transaction_id) WHERE status = 'completed';
CREATE INDEX idx_transactions_provider_code ON transactions(provider_code);
CREATE INDEX idx_transactions_fee_reference ON transactions(fee_reference);
CREATE INDEX idx_transactions_payment_method_provider ON transactions(payment_method_code, provider_code);

COMMENT ON TABLE transactions IS 'Records all financial transactions in the system';
COMMENT ON COLUMN transactions.metadata IS 'Additional transaction-specific data in JSON format';
COMMENT ON COLUMN transactions.gross_amount IS 'Total transaction amount including fees';
COMMENT ON COLUMN transactions.fee_amount IS 'Total fees charged for the transaction';
COMMENT ON COLUMN transactions.net_amount IS 'Amount received by the merchant after deducting fees';


-- Refunds table
CREATE TABLE refunds (
    refund_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES transactions(transaction_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    refunded_amount NUMERIC(10,2) NOT NULL CHECK (refunded_amount > 0),
    fee_amount NUMERIC(10,2) NOT NULL DEFAULT 0,
    reason TEXT,
    metadata JSONB,
    status refund_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_refunds_transaction_id ON refunds(transaction_id);

COMMENT ON TABLE refunds IS 'Tracks refunds linked to transactions';
COMMENT ON COLUMN refunds.amount IS 'Original transaction amount';
COMMENT ON COLUMN refunds.refunded_amount IS 'Amount refunded to the customer';
COMMENT ON COLUMN refunds.fee_amount IS 'Fee charged for processing the refund';


-- Payouts table
CREATE TABLE payouts (
    payout_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_id UUID NOT NULL REFERENCES merchant_accounts(account_id),
    organization_id UUID REFERENCES organizations(organization_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    payout_method VARCHAR NOT NULL,
    bank_account_number VARCHAR,
    bank_name VARCHAR,
    bank_code VARCHAR,
    phone_number VARCHAR,
    metadata JSONB,
    status payout_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    provider_code provider_code REFERENCES providers(code)
);

CREATE INDEX idx_payouts_account_id ON payouts(account_id);
CREATE INDEX idx_payouts_organization_id ON payouts(organization_id);
CREATE INDEX idx_payouts_currency_code ON payouts(currency_code);
CREATE INDEX idx_payouts_created_at ON payouts(created_at);
CREATE INDEX idx_payouts_provider_code ON payouts(provider_code);

COMMENT ON TABLE payouts IS 'Tracks payouts from the system to external accounts or services, including merchant payouts';


-- Entries table
CREATE TABLE entries (
    entry_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_id UUID NOT NULL REFERENCES merchant_accounts(account_id),
    transaction_id UUID REFERENCES transactions(transaction_id),
    payout_id UUID REFERENCES payouts(payout_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount != 0),
    entry_type entry_type NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CHECK (
        (transaction_id IS NOT NULL AND payout_id IS NULL) OR
        (transaction_id IS NULL AND payout_id IS NOT NULL)
    )
);

CREATE INDEX idx_entries_account_id ON entries(account_id);
CREATE INDEX idx_entries_transaction_id ON entries(transaction_id);
CREATE INDEX idx_entries_created_at ON entries(created_at);
CREATE INDEX idx_entries_payout_id ON entries(payout_id);

COMMENT ON TABLE entries IS 'Ledger entries for tracking account balance changes';


-- API Keys table
CREATE TABLE api_keys (
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    api_key VARCHAR NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    expiration_date TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (organization_id, api_key)
);

CREATE INDEX idx_api_keys_organization_id ON api_keys(organization_id);
CREATE INDEX idx_api_keys_api_key ON api_keys(api_key);
CREATE INDEX idx_api_keys_is_active ON api_keys(is_active);

COMMENT ON TABLE api_keys IS 'Stores API keys for authenticated access to the system';


-- API Usage table
CREATE TABLE api_usage (
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    api_key VARCHAR PRIMARY KEY NOT NULL REFERENCES api_keys(api_key),
    endpoint VARCHAR(255) NOT NULL,
    request_count INT NOT NULL DEFAULT 0,
    last_request_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    request_method VARCHAR(10),
    response_status INT,
    response_time FLOAT,
    ip_address VARCHAR(45),
    FOREIGN KEY (organization_id, api_key) REFERENCES api_keys(organization_id, api_key),
    UNIQUE (organization_id, api_key, endpoint)
);

CREATE INDEX idx_api_usage_organization_id ON api_usage(organization_id);
CREATE INDEX idx_api_usage_api_key ON api_usage(api_key);
CREATE INDEX idx_api_usage_last_request_at ON api_usage(last_request_at);

COMMENT ON TABLE api_usage IS 'Tracks API usage statistics for each organization and API key';


-- Webhooks table
CREATE TABLE webhooks (
  webhook_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  url VARCHAR NOT NULL,
  events JSONB NOT NULL,
  secret VARCHAR,
  metadata JSONB,
  is_active BOOLEAN NOT NULL DEFAULT true,
  last_triggered_at TIMESTAMPTZ,
  last_payload JSONB,
  last_response_status INT,
  last_response_body TEXT,
  last_delivery_time FLOAT,
  retry_count INT DEFAULT 0,
  next_retry_at TIMESTAMPTZ,
  cache_key VARCHAR(255),
  cache_expiry TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (merchant_id, url, organization_id)
);

CREATE INDEX idx_webhooks_merchant_id ON webhooks(merchant_id);
CREATE INDEX idx_webhooks_organization_id ON webhooks(organization_id);

COMMENT ON TABLE webhooks IS 'Configures webhook endpoints for real-time event notifications';


-- Logs table
CREATE TABLE logs (
    log_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID REFERENCES merchants(merchant_id),
    action VARCHAR NOT NULL,
    details JSONB,
    severity VARCHAR NOT NULL CHECK (severity IN ('INFO', 'WARNING', 'ERROR', 'CRITICAL')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_logs_merchant_id ON logs(merchant_id);
CREATE INDEX idx_logs_created_at ON logs(created_at);

COMMENT ON TABLE logs IS 'Audit log for tracking important actions and events in the system';


-- Platform Invoices table
CREATE TABLE platform_invoices (
    platform_invoice_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    description TEXT,
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    due_date DATE NOT NULL,
    status invoice_status NOT NULL DEFAULT 'sent',
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_platform_invoices_merchant_id ON platform_invoices(merchant_id);
CREATE INDEX idx_platform_invoices_organization_id ON platform_invoices(organization_id);
CREATE INDEX idx_platform_invoices_currency_code ON platform_invoices(currency_code);

COMMENT ON TABLE platform_invoices IS 'Stores invoice information for merchants and organizations';


-- Customer Invoices tables
CREATE TABLE customer_invoices (
    customer_invoice_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    description TEXT,
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    due_date DATE NOT NULL,
    status invoice_status NOT NULL DEFAULT 'sent',
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_customer_invoices_merchant_id ON customer_invoices(merchant_id);
CREATE INDEX idx_customer_invoices_customer_id ON customer_invoices(customer_id);
CREATE INDEX idx_customer_invoices_currency_code ON customer_invoices(currency_code);

COMMENT ON TABLE customer_invoices IS 'Stores invoice information for customers of merchants';


-- Disputes table
CREATE TABLE disputes (
    dispute_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES transactions(transaction_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),   
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    fee_amount NUMERIC(10,2) NOT NULL DEFAULT 0.00,
    reason TEXT NOT NULL,
    status dispute_status NOT NULL DEFAULT 'pending',
    currency_code currency_code NOT NULL REFERENCES currencies(code) DEFAULT 'XOF',
    resolution_date DATE,
    resolution_details TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_disputes_transaction_id ON disputes(transaction_id);
CREATE INDEX idx_disputes_status ON disputes(status);
CREATE INDEX idx_disputes_currency_code ON disputes(currency_code);
CREATE INDEX idx_disputes_customer_id ON disputes(customer_id);

COMMENT ON TABLE disputes IS 'Stores dispute information for transactions';
COMMENT ON COLUMN disputes.amount IS 'Disputed transaction amount';
COMMENT ON COLUMN disputes.fee_amount IS 'Fee charged for processing the dispute';


-- Metrics table
CREATE TABLE platform_metrics (
  metric_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  entity_type entity_type NOT NULL,
  metric_name VARCHAR NOT NULL,
  metric_value NUMERIC(10,2) NOT NULL,
  metric_date DATE NOT NULL,
  metadata JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_platform_metrics_entity_type ON platform_metrics(entity_type);
CREATE INDEX idx_platform_metrics_metric_name ON platform_metrics(metric_name);
CREATE INDEX idx_platform_metrics_metric_date ON platform_metrics(metric_date);

COMMENT ON TABLE platform_metrics IS 'Stores metrics for merchants, organizations, and the platform';


-- Merchant Feedback table
CREATE TABLE merchant_feedback (
  merchant_feedback_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  feedback_type VARCHAR(50) NOT NULL,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  status feedback_status NOT NULL DEFAULT 'open'
);

CREATE INDEX idx_merchant_feedback_merchant_id ON merchant_feedback(merchant_id);
CREATE INDEX idx_merchant_feedback_status ON merchant_feedback(status);

COMMENT ON TABLE merchant_feedback IS 'Stores merchant feedback, bug reports, or feature requests';


-- Notifications table
CREATE TABLE notifications (
    notification_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    merchant_id UUID REFERENCES merchants(merchant_id),
    type notification_type NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX idx_notifications_merchant_id ON notifications(merchant_id);
CREATE INDEX idx_notifications_type ON notifications(type);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);

COMMENT ON TABLE notifications IS 'Stores notifications for merchants and organizations';

-- Customer API Interactions table
CREATE TABLE customer_api_interactions (
    interaction_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    endpoint VARCHAR(255) NOT NULL,
    request_method VARCHAR(10) NOT NULL,
    request_payload JSONB,
    response_status INT,
    response_payload JSONB,
    response_time FLOAT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    api_key VARCHAR NOT NULL REFERENCES api_keys(api_key)
);

CREATE INDEX idx_customer_api_interactions_organization_id ON customer_api_interactions(organization_id);
CREATE INDEX idx_customer_api_interactions_api_key ON customer_api_interactions(api_key);

COMMENT ON TABLE customer_api_interactions IS 'Logs customer interactions with the API for debugging and analysis';

-- API Rate Limits table
CREATE TABLE api_rate_limits (
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    api_key VARCHAR NOT NULL REFERENCES api_keys(api_key),
    endpoint VARCHAR(255) NOT NULL,
    requests_limit INT NOT NULL,
    time_window INTERVAL NOT NULL,
    current_usage INT NOT NULL DEFAULT 0,
    last_reset_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (organization_id, api_key, endpoint)
);

CREATE INDEX idx_api_rate_limits_organization_id ON api_rate_limits(organization_id);
CREATE INDEX idx_api_rate_limits_api_key ON api_rate_limits(api_key);

COMMENT ON TABLE api_rate_limits IS 'Stores rate limiting information for API endpoints per organization and API key';


-- Error Logs table
CREATE TABLE api_error_logs (
    error_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    error_type VARCHAR(50) NOT NULL,
    error_message TEXT NOT NULL,
    stack_trace TEXT,
    context JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_error_logs_error_type ON api_error_logs(error_type);
CREATE INDEX idx_error_logs_created_at ON api_error_logs(created_at);

COMMENT ON TABLE api_error_logs IS 'Records system errors for debugging and monitoring purposes';


-- Pages table
CREATE TABLE pages (
    page_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    slug VARCHAR(255) NOT NULL,
    content JSONB NOT NULL,
    theme VARCHAR(50),
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (merchant_id, slug)
);

CREATE INDEX idx_pages_merchant_id ON pages(merchant_id);
CREATE INDEX idx_pages_organization_id ON pages(organization_id);
CREATE INDEX idx_pages_slug ON pages(slug);

COMMENT ON TABLE pages IS 'Stores custom checkout pages created by merchants';


-- Payment Links table
CREATE TABLE payment_links (
    link_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    page_id UUID REFERENCES pages(page_id),
    product_id UUID REFERENCES merchant_products(product_id),
    subscription_id UUID REFERENCES merchant_subscriptions(subscription_id),
    title VARCHAR(255) NOT NULL,
    public_description TEXT,
    private_description TEXT,
    price NUMERIC(10,2),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    frequency frequency,
    billing_cycles INT,
    is_active BOOLEAN NOT NULL DEFAULT true,
    expires_at TIMESTAMPTZ,
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_payment_links_merchant_id ON payment_links(merchant_id);
CREATE INDEX idx_payment_links_organization_id ON payment_links(organization_id);
CREATE INDEX idx_payment_links_page_id ON payment_links(page_id);
CREATE INDEX idx_payment_links_product_id ON payment_links(product_id);
CREATE INDEX idx_payment_links_subscription_id ON payment_links(subscription_id);
CREATE INDEX idx_payment_links_currency_code ON payment_links(currency_code);

COMMENT ON TABLE payment_links IS 'Stores payment links for one-time payments, subscriptions, and instant links';