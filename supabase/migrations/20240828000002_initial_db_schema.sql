--------------- ENUM TYPES ---------------

CREATE TYPE transaction_status AS ENUM ('pending', 'completed', 'failed', 'refunded');
CREATE TYPE transaction_type AS ENUM ('payment', 'refund', 'transfer', 'payout');
CREATE TYPE organization_status AS ENUM ('active', 'inactive', 'suspended');
CREATE TYPE provider_code AS ENUM ('ORANGE', 'WAVE', 'ECOBANK', 'MTN', 'STRIPE', 'PAYPAL', 'LOMI');
CREATE TYPE recurring_transaction_type AS ENUM ('subscription', 'installment', 'debt', 'utility', 'other');
CREATE TYPE transfer_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'cancelled');
CREATE TYPE refund_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'cancelled');
CREATE TYPE invoice_status AS ENUM ('draft', 'sent', 'paid', 'overdue', 'cancelled');
CREATE TYPE frequency AS ENUM ('daily', 'weekly', 'bi-weekly', 'monthly', 'yearly', 'one-time');
CREATE TYPE recurring_transaction_status AS ENUM ('active', 'paused', 'cancelled', 'expired');
CREATE TYPE entry_type AS ENUM ('debit', 'credit');
CREATE TYPE payment_method_code AS ENUM (
    'CREDIT_CARD', 'DEBIT_CARD', 'MOBILE_MONEY', 'BANK_TRANSFER', 'SEPA', 'PAYPAL',
    'APPLE_PAY', 'GOOGLE_PAY', 'CASH', 'CRYPTOCURRENCY', 'IDEAL', 'COUNTER', 'WAVE',
    'AIRTEL_MONEY', 'MPESA', 'AIRTIME', 'POS', 'BANK_USSD', 'E_WALLET', 'QR_CODE', 'USSD'
);
CREATE TYPE currency_code AS ENUM (
    'XOF', 'XAF', 'NGN', 'GHS', 'KES', 'ZAR', 'EGP', 'MAD', 'RWF', 'ETB', 'ZMW', 'NAD', 'USD', 'EUR', 'MRO'
);
CREATE TYPE payout_status AS ENUM ('pending', 'processing', 'completed', 'failed');
CREATE TYPE dispute_status AS ENUM ('open', 'under_review', 'resolved', 'closed');
CREATE TYPE kyc_status AS ENUM ('pending', 'approved', 'rejected');
CREATE TYPE entity_type AS ENUM ('merchant', 'organization', 'platform');

--------------- TABLES ---------------

-- Merchants table
CREATE TABLE merchants (
  merchant_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR,
  email VARCHAR UNIQUE NOT NULL,
  phone_number VARCHAR UNIQUE,
  is_admin BOOLEAN NOT NULL DEFAULT false,
  onboarded BOOLEAN NOT NULL DEFAULT false,
  verified BOOLEAN NOT NULL DEFAULT false,
  country VARCHAR,
  metadata JSONB,
  avatar_url TEXT,
  preferred_language VARCHAR(5),
  referral_code VARCHAR,
  mrr NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  arr NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  merchant_lifetime_value NUMERIC(15,2) NOT NULL DEFAULT 0.00,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_deleted BOOLEAN NOT NULL DEFAULT false,
  deleted_at TIMESTAMPTZ
);

CREATE INDEX idx_merchants_email ON merchants(email);
CREATE INDEX idx_active_merchants ON merchants(merchant_id) WHERE is_deleted = false;

COMMENT ON TABLE merchants IS 'Stores information about all merchants using the system';
COMMENT ON COLUMN merchants.mrr IS 'Monthly Recurring Revenue: Total recurring revenue generated by the merchant in the current month';
COMMENT ON COLUMN merchants.arr IS 'Annual Recurring Revenue: Total recurring revenue generated by the merchant in the current year';
COMMENT ON COLUMN merchants.merchant_lifetime_value IS 'Estimated total revenue a merchant will generate over their lifetime';

-- Organizations table
CREATE TABLE organizations (
  organization_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR NOT NULL,
  email VARCHAR UNIQUE NOT NULL,
  phone_number VARCHAR NOT NULL,
  tax_number VARCHAR,
  website_url VARCHAR,
  business_platform_url VARCHAR,
  status organization_status NOT NULL DEFAULT 'active',
  default_currency currency_code NOT NULL DEFAULT 'XOF',
  total_revenue NUMERIC(15,2) DEFAULT 0.00,
  total_transactions INT DEFAULT 0,
  total_merchants INT DEFAULT 0,
  total_customers INT DEFAULT 0,
  metadata JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_deleted BOOLEAN NOT NULL DEFAULT false,
  deleted_at TIMESTAMPTZ
);

CREATE INDEX idx_organizations_email ON organizations(email);
CREATE INDEX idx_organizations_is_deleted ON organizations(is_deleted) WHERE is_deleted = false;

COMMENT ON TABLE organizations IS 'Represents businesses or entities using our application';
COMMENT ON COLUMN organizations.status IS 'Current status of the organization account';;


-- Organization Addresses table
CREATE TABLE organization_addresses (
  organization_id UUID NOT NULL PRIMARY KEY REFERENCES organizations(organization_id),
  country VARCHAR NOT NULL,
  region VARCHAR NOT NULL,
  city VARCHAR NOT NULL,
  address VARCHAR NOT NULL,
  postal_code VARCHAR NOT NULL,
  default_language VARCHAR(5) NOT NULL,
  timezone VARCHAR NOT NULL DEFAULT 'UTC',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_organization_addresses_organization_id ON organization_addresses(organization_id);

COMMENT ON TABLE organization_addresses IS 'Stores address information for organizations';

-- Organization KYC table
CREATE TABLE organization_kyc (
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  document_type VARCHAR NOT NULL,
  document_url VARCHAR NOT NULL,
  authorized_signatory JSONB,
  status VARCHAR NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  kyc_submitted_at TIMESTAMPTZ,
  kyc_approved_at TIMESTAMPTZ,
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  reviewed_at TIMESTAMPTZ,
  PRIMARY KEY (organization_id, document_type)
);

CREATE INDEX idx_organization_kyc_organization_id ON organization_kyc(organization_id);

COMMENT ON TABLE organization_kyc IS 'Stores KYC information for organizations';
COMMENT ON COLUMN organization_kyc.authorized_signatory IS 'Information about the authorized signatory for the organization';


-- Merchant-Organization links table
CREATE TABLE merchant_organization_links (
  merchant_org_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  role VARCHAR NOT NULL CHECK (role IN ('admin', 'user')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (merchant_id, organization_id)
);

CREATE INDEX idx_merchant_org_links_merchant_id ON merchant_organization_links(merchant_id);
CREATE INDEX idx_merchant_org_links_org_id ON merchant_organization_links(organization_id);

COMMENT ON TABLE merchant_organization_links IS 'Links merchants to organizations, defining their roles within each organization';


-- Providers table
CREATE TABLE providers (
  provider_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR NOT NULL,
  code provider_code NOT NULL UNIQUE,
  description TEXT,
  logo_url VARCHAR,
  website_url VARCHAR,
  api_base_url VARCHAR,
  api_key VARCHAR,
  api_secret VARCHAR,
  webhook_url VARCHAR,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_providers_code ON providers(code);

COMMENT ON TABLE providers IS 'Examples: MTN, WAVE, ORANGE, STRIPE, PAYPAL';


-- Payment methods table
CREATE TABLE payment_methods (
  payment_method_code payment_method_code PRIMARY KEY,
  provider_code provider_code REFERENCES providers(code),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_payment_methods_provider_code ON payment_methods(provider_code);

COMMENT ON TABLE payment_methods IS 'Examples: CARD, MOBILE_MONEY, CASH, BANK_TRANSFER';


-- Organization-Providers Settings table
CREATE TABLE organization_providers_settings (
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    provider_code provider_code NOT NULL REFERENCES providers(code),
    is_connected BOOLEAN NOT NULL DEFAULT false,
    phone_number VARCHAR,
    card_number VARCHAR,
    complementary_information JSONB,
    bank_account_number VARCHAR,
    bank_account_name VARCHAR,
    bank_name VARCHAR,
    bank_code VARCHAR,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (organization_id, provider_code),
    UNIQUE (organization_id, provider_code)
);

CREATE INDEX idx_org_providers_provider_code ON organization_providers_settings(provider_code);

COMMENT ON TABLE organization_providers_settings IS 'Links organizations to their chosen payment providers';
COMMENT ON COLUMN organization_providers_settings.is_connected IS 'Indicates if the organization has successfully connected and set up the provider';


-- Currencies table
CREATE TABLE currencies (
  code currency_code PRIMARY KEY,
  name VARCHAR NOT NULL
);

COMMENT ON TABLE currencies IS 'Examples: USD, EUR, XOF, GHS, NGN, etc.';


-- Customers table
CREATE TABLE customers (
    customer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    name VARCHAR NOT NULL,
    email VARCHAR,
    phone_number VARCHAR,
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_customers_merchant_id ON customers(merchant_id);
CREATE INDEX idx_customers_organization_id ON customers(organization_id);
CREATE INDEX idx_customers_email ON customers(email);
CREATE INDEX idx_customers_phone_number ON customers(phone_number);

COMMENT ON TABLE customers IS 'Stores information about the customers of our merchants';


-- Accounts table
CREATE TABLE accounts (
    account_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    balance NUMERIC(10,2) NOT NULL DEFAULT 0 CHECK (balance >= 0),
    provider_code provider_code NOT NULL REFERENCES providers(code),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    is_active BOOLEAN NOT NULL DEFAULT true,
    UNIQUE (merchant_id, provider_code, currency_code)
);

CREATE INDEX idx_accounts_merchant_id ON accounts(merchant_id);
CREATE INDEX idx_accounts_provider_code ON accounts(provider_code);
CREATE INDEX idx_accounts_currency_code ON accounts(currency_code);

COMMENT ON TABLE accounts IS 'Represents financial accounts for merchants, linked to specific payment methods and currencies';


-- Main accounts table
CREATE TABLE main_accounts (
    main_account_id UUID PRIMARY KEY UNIQUE DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    balance NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (balance >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (merchant_id, currency_code)
);

CREATE INDEX idx_main_accounts_merchant_id ON main_accounts(merchant_id);

COMMENT ON TABLE main_accounts IS 'Identifies the primary account for each merchant in each currency';


-- Platform Main Balance table
CREATE TABLE platform_main_balance (
  platform_main_balance NUMERIC(15,2) NOT NULL PRIMARY KEY DEFAULT 0 CHECK (balance >= 0),
  currency_code currency_code NOT NULL REFERENCES currencies(code),
  total_transactions INT NOT NULL DEFAULT 0 CHECK (total_transactions >= 0),
  total_fees NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (total_fees >= 0),
  total_revenue NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (total_revenue >= 0),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (currency_code)
);

CREATE INDEX idx_platform_main_balance_currency_code ON platform_main_balance(currency_code);

COMMENT ON TABLE platform_main_ balance IS 'Stores lomi.s balance, total transactions, total fees, and total amount for each currency after deducting fees from merchants'' customers transactions';


-- Platform Payouts table
CREATE TABLE platform_payouts (
  payout_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  organization_id UUID NOT NULL REFERENCES organizations(organization_id),
  amount NUMERIC(15,2) NOT NULL CHECK (amount > 0),
  from_account_id UUID NOT NULL REFERENCES accounts(account_id),
  from_main_account_id UUID NOT NULL REFERENCES main_accounts(main_account_id),
  currency_code currency_code NOT NULL REFERENCES currencies(code),
  payout_method VARCHAR NOT NULL,
  payout_details JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_platform_payouts_organization_id ON platform_payouts(organization_id);
CREATE INDEX idx_platform_payouts_currency_code ON platform_payouts(currency_code);
CREATE INDEX idx_platform_payouts_created_at ON platform_payouts(created_at);

COMMENT ON TABLE platform_payouts IS 'Stores information about the payouts made by organizations to lomi.';


-- Platform Provider Balances table
CREATE TABLE platform_provider_balances (
  platform_provider_balance NUMERIC(15,2) PRIMARY KEY NOT NULL DEFAULT 0 CHECK (balance >= 0),
  provider_code provider_code NOT NULL REFERENCES providers(code),
  currency_code currency_code NOT NULL REFERENCES currencies(code),
  total_transactions NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (total_transactions >= 0),
  total_fees NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (total_fees >= 0),
  total_revenue NUMERIC(15,2) NOT NULL DEFAULT 0 CHECK (total_revenue >= 0),
  last_transaction_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
);

CREATE INDEX idx_platform_provider_balances_provider_code ON platform_provider_balances(provider_code);
CREATE INDEX idx_platform_provider_balances_currency_code ON platform_provider_balances(currency_code);
CREATE INDEX idx_platform_provider_balances_last_transaction_at ON platform_provider_balances(last_transaction_at);

COMMENT ON TABLE platform_provider_balances IS 'Stores the balance, total transactions, total fees, and total amount for each provider and currency';


-- Merchant Products table
CREATE TABLE merchant_products (
    product_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price NUMERIC(10,2) NOT NULL CHECK (price >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    frequency frequency NOT NULL,
    image_url TEXT,
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_merchant_products_merchant_id ON merchant_products(merchant_id);

COMMENT ON TABLE merchant_products IS 'Stores products and services offered by merchants';


-- Customer Subscriptions table
CREATE TABLE customer_subscriptions (
    subscription_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    product_id UUID NOT NULL REFERENCES merchant_products(product_id),
    status VARCHAR(20) NOT NULL DEFAULT 'active',
    start_date DATE NOT NULL,
    end_date DATE,
    next_billing_date DATE,
    billing_frequency frequency NOT NULL,
    amount NUMERIC(10,2) NOT NULL CHECK (amount >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_customer_subscriptions_customer_id ON customer_subscriptions(customer_id);
CREATE INDEX idx_customer_subscriptions_product_id ON customer_subscriptions(product_id);

COMMENT ON TABLE customer_subscriptions IS 'Tracks customer subscriptions to merchant products';


-- Fees table
CREATE TABLE fees (
    fee_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR NOT NULL UNIQUE,
    transaction_type transaction_type NOT NULL,
    fee_type VARCHAR NOT NULL,
    percentage NUMERIC(5,2) NOT NULL DEFAULT 0 CHECK (percentage >= 0 AND percentage <= 100),
    fixed_amount NUMERIC(10,2) NOT NULL DEFAULT 0 CHECK (fixed_amount >= 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    payment_method_code payment_method_code REFERENCES payment_methods(payment_method_code),
    provider_code provider_code REFERENCES providers(code),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (transaction_type, fee_type, currency_code, payment_method_code, provider_code)
);

CREATE INDEX idx_fees_transaction_type ON fees(transaction_type);
CREATE INDEX idx_fees_fee_type ON fees(fee_type);
CREATE INDEX idx_fees_currency_code ON fees(currency_code);
CREATE INDEX idx_fees_payment_method_code ON fees(payment_method_code);
CREATE INDEX idx_fees_provider_code ON fees(provider_code);

COMMENT ON TABLE fees IS 'Defines fee structures for different transaction types and payment methods';


-- Transactions table
CREATE TABLE transactions (
    transaction_id UUID PRIMARY KEY UNIQUE DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    transaction_type transaction_type NOT NULL,
    status transaction_status NOT NULL DEFAULT 'pending',
    description TEXT,
    reference_id VARCHAR(8) NOT NULL,
    metadata JSONB,
    gross_amount NUMERIC(10,2) NOT NULL CHECK (gross_amount > 0),
    fee_amount NUMERIC(15,2) NOT NULL,
    net_amount NUMERIC(10,2) NOT NULL CHECK (net_amount > 0),
    fee_reference TEXT NOT NULL REFERENCES fees(name),
    currency_code currency_code NOT NULL REFERENCES currencies(code) DEFAULT 'XOF',
    provider_code provider_code NOT NULL REFERENCES providers(code),
    payment_method_code payment_method_code NOT NULL REFERENCES payment_methods(payment_method_code),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_transactions_merchant_id ON transactions(merchant_id);
CREATE INDEX idx_transactions_organization_id ON transactions(organization_id);
CREATE INDEX idx_transactions_customer_id ON transactions(customer_id);
CREATE INDEX idx_transactions_transaction_type ON transactions(transaction_type);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_transactions_currency_code ON transactions(currency_code);
CREATE INDEX idx_transactions_payment_method_code ON transactions(payment_method_code);
CREATE INDEX idx_transactions_created_at ON transactions(created_at);
CREATE INDEX idx_transactions_net_amount ON transactions(net_amount);
CREATE INDEX idx_transactions_gross_amount ON transactions(gross_amount);
CREATE INDEX idx_transactions_fee_amount ON transactions(fee_amount);
CREATE INDEX idx_transactions_pending ON transactions(transaction_id) WHERE status = 'pending';
CREATE INDEX idx_transactions_completed ON transactions(transaction_id) WHERE status = 'completed';
CREATE INDEX idx_transactions_provider_code ON transactions(provider_code);
CREATE INDEX idx_transactions_fee_reference ON transactions(fee_reference);

COMMENT ON TABLE transactions IS 'Records all financial transactions in the system';
COMMENT ON COLUMN transactions.metadata IS 'Additional transaction-specific data in JSON format';
COMMENT ON COLUMN transactions.gross_amount IS 'Total transaction amount including fees';
COMMENT ON COLUMN transactions.fee_amount IS 'Total fees charged for the transaction';
COMMENT ON COLUMN transactions.net_amount IS 'Amount received by the merchant after deducting fees';


-- Recurring Transactions table
CREATE TABLE recurring_transactions (
    recurring_transaction_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    payment_method_code payment_method_code NOT NULL REFERENCES payment_methods(payment_method_code),
    payment_type recurring_transaction_type NOT NULL,
    frequency frequency NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    next_payment_date DATE NOT NULL,
    status recurring_transaction_status NOT NULL DEFAULT 'active',
    total_cycles INT DEFAULT 0,
    retry_payment_every INT DEFAULT 0,
    total_retries INT DEFAULT 0,
    failed_payment_action VARCHAR,
    email_notifications JSONB,
    charge_immediately BOOLEAN NOT NULL DEFAULT true,
    follow_up_subscriber BOOLEAN NOT NULL DEFAULT false,
    description TEXT,
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_recurring_transactions_merchant_id ON recurring_transactions(merchant_id);
CREATE INDEX idx_recurring_transactions_organization_id ON recurring_transactions(organization_id);

COMMENT ON TABLE recurring_transactions IS 'Stores information for recurring payment schedules';
COMMENT ON COLUMN recurring_transactions.next_payment_date IS 'The next payment date of the recurring transaction';
COMMENT ON COLUMN recurring_transactions.status IS 'Current status of the recurring transaction (active, paused, cancelled, expired)';

-- Refunds table
CREATE TABLE refunds (
    refund_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES transactions(transaction_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    refunded_amount NUMERIC(10,2) NOT NULL CHECK (refunded_amount > 0),
    fee_amount NUMERIC(10,2) NOT NULL DEFAULT 0,
    reason TEXT,
    metadata JSONB,
    status refund_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_refunds_transaction_id ON refunds(transaction_id);

COMMENT ON TABLE refunds IS 'Tracks refunds linked to transactions';
COMMENT ON COLUMN refunds.amount IS 'Original transaction amount';
COMMENT ON COLUMN refunds.refunded_amount IS 'Amount refunded to the customer';
COMMENT ON COLUMN refunds.fee_amount IS 'Fee charged for processing the refund';


-- Internal Transfers table
CREATE TABLE internal_transfers (
    internal_transfer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    from_account_id UUID NOT NULL REFERENCES accounts(account_id),
    to_main_account_id UUID NOT NULL REFERENCES main_accounts(main_account_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    status transfer_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_internal_transfers_from_account_id ON internal_transfers(from_account_id);
CREATE INDEX idx_internal_transfers_to_main_account_id ON internal_transfers(to_main_account_id);

COMMENT ON TABLE internal_transfers IS 'Records transfers from individual accounts to main accounts';


-- [EXPERIMENTAL & NOT USED] Transfers table
CREATE TABLE transfers (
    transfer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    from_account_id UUID NOT NULL REFERENCES accounts(account_id),
    to_account_id UUID NOT NULL REFERENCES accounts(account_id),
    transaction_id UUID NOT NULL REFERENCES transactions(transaction_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    status transfer_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_transfers_from_account_id ON transfers(from_account_id);
CREATE INDEX idx_transfers_to_account_id ON transfers(to_account_id);
CREATE INDEX idx_transfers_transaction_id ON transfers(transaction_id);
CREATE INDEX idx_transfers_created_at ON transfers(created_at);

COMMENT ON TABLE transfers IS 'Records transfers between merchants accounts within the system';


-- Payouts table
CREATE TABLE payouts (
    payout_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_id UUID NOT NULL REFERENCES accounts(account_id),
    organization_id UUID REFERENCES organizations(organization_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    payout_method VARCHAR NOT NULL,
    bank_account_number VARCHAR,
    bank_name VARCHAR,
    bank_code VARCHAR,
    phone_number VARCHAR,
    metadata JSONB,
    status payout_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_payouts_account_id ON payouts(account_id);
CREATE INDEX idx_payouts_organization_id ON payouts(organization_id);
CREATE INDEX idx_payouts_currency_code ON payouts(currency_code);
CREATE INDEX idx_payouts_created_at ON payouts(created_at);

COMMENT ON TABLE payouts IS 'Tracks payouts from the system to external accounts or services, including merchant payouts';


-- Entries table
CREATE TABLE entries (
    entry_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_id UUID NOT NULL REFERENCES accounts(account_id),
    transaction_id UUID REFERENCES transactions(transaction_id),
    transfer_id UUID REFERENCES transfers(transfer_id),
    internal_transfer_id UUID REFERENCES internal_transfers(internal_transfer_id),
    payout_id UUID REFERENCES payouts(payout_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount != 0),
    entry_type entry_type NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CHECK (
        (transaction_id IS NOT NULL AND transfer_id IS NULL AND internal_transfer_id IS NULL AND payout_id IS NULL) OR
        (transaction_id IS NULL AND transfer_id IS NOT NULL AND internal_transfer_id IS NULL AND payout_id IS NULL) OR
        (transaction_id IS NULL AND transfer_id IS NULL AND internal_transfer_id IS NOT NULL AND payout_id IS NULL) OR
        (transaction_id IS NULL AND transfer_id IS NULL AND internal_transfer_id IS NULL AND payout_id IS NOT NULL)
    )
);

CREATE INDEX idx_entries_account_id ON entries(account_id);
CREATE INDEX idx_entries_transaction_id ON entries(transaction_id);
CREATE INDEX idx_entries_created_at ON entries(created_at);

COMMENT ON TABLE entries IS 'Ledger entries for tracking account balance changes';


-- API Keys table
CREATE TABLE api_keys (
    key_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    api_key VARCHAR NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    expiration_date TIMESTAMPTZ,
    last_used_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_api_keys_organization_id ON api_keys(organization_id);
CREATE INDEX idx_api_keys_api_key ON api_keys(api_key);
CREATE INDEX idx_api_keys_is_active ON api_keys(is_active);

COMMENT ON TABLE api_keys IS 'Stores API keys for authenticated access to the system';


-- API usage tracking table
CREATE TABLE api_usage (
    usage_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    api_key_id UUID NOT NULL REFERENCES api_keys(key_id),
    endpoint VARCHAR(255) NOT NULL,
    request_count INT NOT NULL DEFAULT 0,
    last_request_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_api_usage_api_key_id ON api_usage(api_key_id);
CREATE INDEX idx_api_usage_last_request_at ON api_usage(last_request_at);

COMMENT ON TABLE api_usage IS 'Tracks API usage metrics for each API key';


-- Webhooks table
CREATE TABLE webhooks (
  webhook_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
  url VARCHAR NOT NULL,
  events VARCHAR[] NOT NULL,
  secret VARCHAR,
  metadata JSONB,
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_triggered_at TIMESTAMPTZ
);

CREATE INDEX idx_webhooks_merchant_id ON webhooks(merchant_id);

COMMENT ON TABLE webhooks IS 'Configures webhook endpoints for real-time event notifications';


-- Logs table
CREATE TABLE logs (
    log_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID REFERENCES merchants(merchant_id),
    action VARCHAR NOT NULL,
    details JSONB,
    severity VARCHAR NOT NULL CHECK (severity IN ('INFO', 'WARNING', 'ERROR', 'CRITICAL')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_logs_merchant_id ON logs(merchant_id);
CREATE INDEX idx_logs_created_at ON logs(created_at);

COMMENT ON TABLE logs IS 'Audit log for tracking important actions and events in the system';


-- Platform Invoices table
CREATE TABLE invoices (
    platform_invoice_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    description TEXT,
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    due_date DATE NOT NULL,
    status invoice_status NOT NULL DEFAULT 'draft',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_platform_invoices_merchant_id ON invoices(merchant_id);
CREATE INDEX idx_platform_invoices_organization_id ON invoices(organization_id);

COMMENT ON TABLE invoices IS 'Stores invoice information for merchants and organizations';


-- Customer Invoices tables
CREATE TABLE customer_invoices (
    customer_invoice_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    merchant_id UUID NOT NULL REFERENCES merchants(merchant_id),
    organization_id UUID NOT NULL REFERENCES organizations(organization_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    description TEXT,
    currency_code currency_code NOT NULL REFERENCES currencies(code),
    due_date DATE NOT NULL,
    status invoice_status NOT NULL DEFAULT 'draft',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_customer_invoices_merchant_id ON customer_invoices(merchant_id);
CREATE INDEX idx_customer_invoices_organization_id ON customer_invoices(organization_id);
CREATE INDEX idx_customer_invoices_customer_id ON customer_invoices(customer_id);

COMMENT ON TABLE customer_invoices IS 'Stores invoice information for customers of merchants';


-- Disputes table
CREATE TABLE disputes (
    dispute_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES transactions(transaction_id),
    customer_id UUID NOT NULL REFERENCES customers(customer_id),   
    amount NUMERIC(10,2) NOT NULL CHECK (amount > 0),
    fee_amount NUMERIC(10,2) NOT NULL DEFAULT 0.00,
    reason TEXT NOT NULL,
    metadata JSONB,
    status dispute_status NOT NULL DEFAULT 'open',
    currency_code currency_code NOT NULL REFERENCES currencies(code) DEFAULT 'XOF',
    resolution_date DATE,
    resolution_details TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_disputes_transaction_id ON disputes(transaction_id);
CREATE INDEX idx_disputes_status ON disputes(status);
CREATE INDEX idx_disputes_currency_code ON disputes(currency_code);
CREATE INDEX idx_disputes_customer_id ON disputes(customer_id);

COMMENT ON TABLE disputes IS 'Stores dispute information for transactions';
COMMENT ON COLUMN disputes.amount IS 'Disputed transaction amount';
COMMENT ON COLUMN disputes.fee_amount IS 'Fee charged for processing the dispute';


-- Metrics table
CREATE TABLE metrics (
  metric_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  entity_type entity_type NOT NULL,
  metric_name VARCHAR NOT NULL,
  metric_value NUMERIC(10,2) NOT NULL,
  metric_date DATE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_metrics_entity_type ON metrics(entity_type);
CREATE INDEX idx_metrics_metric_name ON metrics(metric_name);
CREATE INDEX idx_metrics_metric_date ON metrics(metric_date);

COMMENT ON TABLE metrics IS 'Stores metrics for merchants, organizations, and the platform';