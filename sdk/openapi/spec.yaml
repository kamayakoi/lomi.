openapi: 3.0.0
info:
  title: lomi.africa Payments API
  version: 1.0.0
  description: API for the lomi.africa payment orchestration platform
servers:
  - url: https://api.lomi.africa/v1

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ValidationError:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          
    Merchant:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        name: 
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        onboarded:
          type: boolean
        country:
          type: string
        avatar_url:
          type: string
        preferred_language:
          type: string
        timezone:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          
    ConnectedProvider:
      type: object
      properties:
        provider_code:
          $ref: '#/components/schemas/ProviderCode'
        is_connected:
          type: boolean
        phone_number:
          type: string
        is_phone_verified:
          type: boolean
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
            
    CreateProduct:
      type: object  
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        currency_code:
          $ref: '#/components/schemas/CurrencyCode'
        image_url:
          type: string
        is_active:
          type: boolean
        display_on_storefront:
          type: boolean
      required:
        - name
        - price
        - currency_code
        
    Product:
      allOf:
        - $ref: '#/components/schemas/CreateProduct'
        - type: object
          properties:
            product_id:
              type: string
              format: uuid
            merchant_id:
              type: string
              format: uuid
            organization_id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            
    CreateSubscriptionPlan:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        amount:
          type: number
        currency_code:
          $ref: '#/components/schemas/CurrencyCode'
        billing_frequency:
          $ref: '#/components/schemas/BillingFrequency'
        failed_payment_action:
          $ref: '#/components/schemas/FailedPaymentAction'
        charge_day:
          type: integer
        metadata:
          type: object
        display_on_storefront:
          type: boolean
        image_url:
          type: string
        first_payment_type:
          $ref: '#/components/schemas/FirstPaymentType'
      required:
        - name
        - amount
        - currency_code
        - billing_frequency
        
    SubscriptionPlan:
      allOf:
        - $ref: '#/components/schemas/CreateSubscriptionPlan'
        - type: object
          properties:
            plan_id:
              type: string
              format: uuid
            merchant_id:
              type: string
              format: uuid
            organization_id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            
    CreateTransaction:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid  
        product_id:
          type: string
          format: uuid
        subscription_id:
          type: string
          format: uuid
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        description:
          type: string
        reference_id:
          type: string
        metadata:
          type: object
        gross_amount:
          type: number
        fee_amount:
          type: number
        net_amount:
          type: number
        fee_reference:
          type: string
        currency_code:
          $ref: '#/components/schemas/CurrencyCode'
        provider_code:
          $ref: '#/components/schemas/ProviderCode'
        payment_method_code:
          $ref: '#/components/schemas/PaymentMethodCode'
        additional_fees:
          type: array
          items:
            type: object
      required:
        - merchant_id
        - organization_id
        - customer_id
        - transaction_type
        - reference_id
        - gross_amount
        - fee_amount
        - net_amount
        - fee_reference
        - currency_code
        - provider_code
        - payment_method_code
        
    Transaction:
      allOf:
        - $ref: '#/components/schemas/CreateTransaction'
        - type: object
          properties:
            transaction_id:
              type: string
              format: uuid
            status:
              $ref: '#/components/schemas/TransactionStatus'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            
    CreateCheckoutSession:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        subscription_id:
          type: string
          format: uuid
        success_url:
          type: string
          format: uri
        cancel_url:
          type: string
          format: uri
        provider_codes:
          type: array
          items:
            $ref: '#/components/schemas/ProviderCode'
          description: Specific payment providers to enable for this checkout session
        customer_email:
          type: string
          format: email
        customer_phone:
          type: string
        customer_name:
          type: string
        metadata:
          type: object
      required:
        - merchant_id
        - success_url
        - cancel_url
        - provider_codes
        
    CheckoutSession:
      allOf:
        - $ref: '#/components/schemas/CreateCheckoutSession'
        - type: object
          properties:
            checkout_session_id:
              type: string
            url:
              type: string
              format: uri
            status:
              type: string
              enum:
                - open
                - completed
                - expired
            created_at:
              type: string
              format: date-time
            expires_at:
              type: string
              format: date-time
            
    Provider:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ProviderCode'
        name:
          type: string
        description:
          type: string
            
    CurrencyCode:
      type: string
      enum:
        - XOF
        - USD
        - EUR
        
    TransactionType:
      type: string
      enum:
        - payment
        - instalment
        
    TransactionStatus:
      type: string
      enum:
        - pending
        - completed
        - failed
        - refunded
        
    ProviderCode:
      type: string
      enum:
        - ORANGE
        - WAVE
        - ECOBANK
        - MTN
        - NOWPAYMENTS
        - APPLE
        - GOOGLE
        - MOOV
        - AIRTEL
        - MPESA
        - WIZALL
        - OPAY
        - OTHER
        
    PaymentMethodCode:
      type: string
      enum:
        - CARDS
        - MOBILE_MONEY
        - E_WALLET
        - APPLE_PAY
        - GOOGLE_PAY
        - USSD
        - QR_CODE
        - BANK_TRANSFER
        - CRYPTO
        - OTHER
        
    BillingFrequency:
      type: string
      enum:
        - weekly
        - bi-weekly
        - monthly
        - bi-monthly
        - quarterly
        - semi-annual
        - yearly
        - one-time
        
    FailedPaymentAction:
      type: string
      enum:
        - cancel
        - pause
        - continue
        
    FirstPaymentType:
      type: string
      enum:
        - initial
        - non_initial
        
    Refund:
      type: object
      properties:
        refund_id:
          type: string
          format: uuid
        transaction_id:
          type: string
          format: uuid
        amount:
          type: number
        currency_code:
          $ref: '#/components/schemas/CurrencyCode'
        status:
          type: string
          enum: [pending, completed, failed]
        reason:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - refund_id
        - transaction_id
        - amount
        - currency_code
        - status

    CreateRefund:
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
        amount:
          type: number
        reason:
          type: string
        metadata:
          type: object
      required:
        - transaction_id
        - amount

    Customer:
      type: object
      properties:
        customer_id:
          type: string
          format: uuid
        merchant_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        phone_number:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - customer_id
        - merchant_id

    CreateCustomer:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        phone_number:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
        metadata:
          type: object
      required:
        - merchant_id

    PaymentLinkType:
      type: string
      enum:
        - product
        - plan
        - instant

    CreatePaymentLink:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        link_type:
          $ref: '#/components/schemas/PaymentLinkType'
        product_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        title:
          type: string
        public_description:
          type: string
        private_description:
          type: string
        price:
          type: number
        currency_code:
          $ref: '#/components/schemas/CurrencyCode'
        allowed_providers:
          type: array
          items:
            $ref: '#/components/schemas/ProviderCode'
        allow_coupon_code:
          type: boolean
        is_active:
          type: boolean
        expires_at:
          type: string
          format: date-time
        success_url:
          type: string
          format: uri
        metadata:
          type: object
      required:
        - merchant_id
        - link_type
        - title
        - currency_code
        - allowed_providers

    PaymentLink:
      allOf:
        - $ref: '#/components/schemas/CreatePaymentLink'
        - type: object
          properties:
            link_id:
              type: string
              format: uuid
            organization_id:
              type: string
              format: uuid
            url:
              type: string
              format: uri
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time

    WebhookEvent:
      type: string
      enum:
        - TRANSACTION_CREATED
        - TRANSACTION_COMPLETED
        - TRANSACTION_FAILED
        - REFUND_CREATED
        - REFUND_COMPLETED
        - REFUND_FAILED
        - SUBSCRIPTION_CREATED
        - SUBSCRIPTION_RENEWED
        - SUBSCRIPTION_FAILED
        - SUBSCRIPTION_CANCELLED
        - PAYMENT_LINK_CREATED
        - PAYMENT_LINK_USED
        - PROVIDER_CONNECTED
        - PROVIDER_DISCONNECTED

    CreateWebhook:
      type: object
      properties:
        merchant_id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        authorized_events:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEvent'
        is_active:
          type: boolean
          default: true
        metadata:
          type: object
      required:
        - merchant_id
        - url
        - authorized_events

    Webhook:
      allOf:
        - $ref: '#/components/schemas/CreateWebhook'
        - type: object
          properties:
            webhook_id:
              type: string
              format: uuid
            verification_token:
              type: string
            last_triggered_at:
              type: string
              format: date-time
            last_payload:
              type: object
            last_response_status:
              type: integer
            last_response_body:
              type: string
            retry_count:
              type: integer
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time

security:
  - ApiKeyAuth: []
  
paths:
  /ping:
    get:
      summary: Ping the API
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: pong
                    
  /merchants/{merchant_id}:
    get:
      summary: Get merchant details
      parameters:
        - name: merchant_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
                
  /merchants/{merchant_id}/providers:
    get:
      summary: List connected payment providers for a merchant
      parameters:
        - name: merchant_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectedProvider'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
                
  /products:
    post:
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
                
    get:
      summary: List products for a merchant
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /products/{product_id}:
    get:
      summary: Get product details
      description: Get details of a specific product
      operationId: getProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update product
      description: Update product details
      operationId: updateProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                currency_code:
                  $ref: '#/components/schemas/CurrencyCode'
                image_url:
                  type: string
                is_active:
                  type: boolean
                display_on_storefront:
                  type: boolean
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete product
      description: Delete a product
      operationId: deleteProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
                  
  /subscriptions:
    post:
      summary: Create a subscription plan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionPlan'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlan'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
                
    get:
      summary: List subscription plans for a merchant  
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionPlan'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /subscriptions/{plan_id}:
    get:
      summary: Get subscription plan details
      description: Get details of a specific subscription plan
      operationId: getSubscriptionPlan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Subscription plan details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlan'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update subscription plan
      description: Update subscription plan details
      operationId: updateSubscriptionPlan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                amount:
                  type: number
                currency_code:
                  $ref: '#/components/schemas/CurrencyCode'
                billing_frequency:
                  $ref: '#/components/schemas/BillingFrequency'
                failed_payment_action:
                  $ref: '#/components/schemas/FailedPaymentAction'
                charge_day:
                  type: integer
                metadata:
                  type: object
                display_on_storefront:
                  type: boolean
                image_url:
                  type: string
                first_payment_type:
                  $ref: '#/components/schemas/FirstPaymentType'
      responses:
        '200':
          description: Subscription plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlan'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete subscription plan
      description: Delete a subscription plan
      operationId: deleteSubscriptionPlan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Subscription plan deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /transactions:
    post:
      summary: Create a transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransaction'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
                
    get:
      summary: List transactions for a merchant
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                
  /providers:
    get:
      summary: List available payment providers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Provider'
        '401':
          $ref: '#/components/responses/UnauthorizedError' 

  /refunds:
    post:
      summary: Create a refund
      description: Initiate a refund for a transaction
      operationId: createRefund
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRefund'
      responses:
        '201':
          description: Refund created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /refunds/{refund_id}:
    get:
      summary: Get refund details
      description: Get details of a specific refund
      operationId: getRefund
      parameters:
        - name: refund_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Refund details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update refund status
      description: Update the status of a refund
      operationId: updateRefund
      parameters:
        - name: refund_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [completed, failed]
                metadata:
                  type: object
              required:
                - status
      responses:
        '200':
          description: Refund updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError' 

  /customers:
    post:
      summary: Create a customer
      description: Create a new customer for a merchant
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    get:
      summary: List customers
      description: List all customers for a merchant
      operationId: listCustomers
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: email
          in: query
          schema:
            type: string
            format: email
        - name: phone_number
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /customers/{customer_id}:
    get:
      summary: Get customer details
      description: Get details of a specific customer
      operationId: getCustomer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update customer
      description: Update customer details
      operationId: updateCustomer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                phone_number:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                address:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    postal_code:
                      type: string
                    country:
                      type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete customer
      description: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError' 

  /payment-links:
    post:
      summary: Create a payment link
      description: Create a new payment link for collecting payments
      operationId: createPaymentLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentLink'
      responses:
        '201':
          description: Payment link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLink'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    get:
      summary: List payment links
      description: List all payment links for a merchant
      operationId: listPaymentLinks
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: link_type
          in: query
          schema:
            $ref: '#/components/schemas/PaymentLinkType'
        - name: currency_code
          in: query
          schema:
            $ref: '#/components/schemas/CurrencyCode'
        - name: is_active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of payment links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentLink'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /payment-links/{link_id}:
    get:
      summary: Get payment link details
      description: Get details of a specific payment link
      operationId: getPaymentLink
      parameters:
        - name: link_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment link details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLink'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update payment link
      description: Update payment link details
      operationId: updatePaymentLink
      parameters:
        - name: link_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                public_description:
                  type: string
                private_description:
                  type: string
                price:
                  type: number
                currency_code:
                  $ref: '#/components/schemas/CurrencyCode'
                allowed_providers:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProviderCode'
                allow_coupon_code:
                  type: boolean
                is_active:
                  type: boolean
                expires_at:
                  type: string
                  format: date-time
                success_url:
                  type: string
                  format: uri
                metadata:
                  type: object
      responses:
        '200':
          description: Payment link updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLink'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete payment link
      description: Delete a payment link
      operationId: deletePaymentLink
      parameters:
        - name: link_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Payment link deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError' 

  /webhooks:
    post:
      summary: Register a new webhook endpoint
      description: Create a new webhook endpoint for receiving event notifications
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhook'
      responses:
        '201':
          description: Webhook endpoint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    get:
      summary: List webhook endpoints
      description: List all webhook endpoints for a merchant
      operationId: listWebhooks
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: is_active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of webhook endpoints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /webhooks/{webhook_id}:
    get:
      summary: Get webhook details
      description: Get details of a specific webhook endpoint
      operationId: getWebhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Webhook details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update webhook configuration
      description: Update webhook endpoint configuration
      operationId: updateWebhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                authorized_events:
                  type: array
                  items:
                    $ref: '#/components/schemas/WebhookEvent'
                is_active:
                  type: boolean
                metadata:
                  type: object
      responses:
        '200':
          description: Webhook configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete webhook endpoint
      description: Delete a webhook endpoint
      operationId: deleteWebhook
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Webhook endpoint deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError' 

  /checkout-sessions:
    post:
      summary: Create a checkout session
      description: Create a new checkout session for collecting payments
      operationId: createCheckoutSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckoutSession'
      responses:
        '201':
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    get:
      summary: List checkout sessions
      description: List all checkout sessions for a merchant
      operationId: listCheckoutSessions
      parameters:
        - name: merchant_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: checkout_session_id
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum:
              - open
              - completed
              - expired
      responses:
        '200':
          description: List of checkout sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckoutSession'
        '401':
          $ref: '#/components/responses/UnauthorizedError' 